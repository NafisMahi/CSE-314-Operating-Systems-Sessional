diff --git a/Makefile b/Makefile
index 39a99d7..fb3d7c0 100644
--- a/Makefile
+++ b/Makefile
@@ -125,9 +125,12 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_myprog\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_sysinfotest\
+	$U/_trace\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/bio.c b/kernel/bio.c
index 60d91a6..94a7ca4 100644
--- a/kernel/bio.c
+++ b/kernel/bio.c
@@ -151,3 +151,4 @@ bunpin(struct buf *b) {
 }
 
 
+
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..835b31c 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -16,7 +16,7 @@ void            brelse(struct buf*);
 void            bwrite(struct buf*);
 void            bpin(struct buf*);
 void            bunpin(struct buf*);
-
+int             freemem(void);
 // console.c
 void            consoleinit(void);
 void            consoleintr(int);
@@ -69,7 +69,7 @@ void            initlog(int, struct superblock*);
 void            log_write(struct buf*);
 void            begin_op(void);
 void            end_op(void);
-
+int             nproc(void);
 // pipe.c
 int             pipealloc(struct file**, struct file**);
 void            pipeclose(struct pipe*, int);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..7e54bd4 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,23 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+
+int freemem(void)
+{
+  struct run *r;
+  r=kmem.freelist;
+
+  acquire(&kmem.lock);
+  int num_of_free_pages=0;
+  while(r)
+  {
+    num_of_free_pages++;
+    r=r->next;
+  }
+  
+  release(&kmem.lock);
+  
+  int free_bytes=4094*num_of_free_pages;
+  return free_bytes;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..e78c283 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->trace = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -681,3 +682,23 @@ procdump(void)
     printf("\n");
   }
 }
+
+int nproc(void)
+{
+  struct proc *p;
+  int running_proc=0;
+
+  acquire(&proc->lock);
+
+  for(p=proc;p<&proc[NPROC];p++ )
+  {
+    if(p->state!=UNUSED)
+    {
+      running_proc++;
+    }
+  }
+
+  release(&proc->lock);
+
+  return running_proc;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ddbd170 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -90,7 +90,8 @@ struct proc {
   void *chan;                  // If non-zero, sleeping on chan
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
-  int pid;                     // Process ID
+  int pid;                    // Process ID
+  int trace;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..b39c334 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void); 
+extern uint64 sys_sysinfo(void);
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +129,36 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
 
+char *syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
+ };
+
 void
 syscall(void)
 {
@@ -144,4 +175,8 @@ syscall(void)
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
+
+  if(num>0 && num <= 22 && p->trace==num ) {
+    printf("pid %d , syscall %s , return value:  %d\n", p->pid, syscallnames[num], p->trapframe->a0);
+  }
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e153363 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cfcd502 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +90,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_trace(void){
+
+  argint(0,&myproc()->trace);
+  if(myproc()->trace>0 && myproc()->trace<=22)
+  {
+    return 0;
+  }
+
+  return -1;
+
+}
+
+uint64
+sys_sysinfo(void){
+
+
+  int num_of_free_bytes=freemem();
+  int num_of_running_proc=nproc();
+
+  printf("sysinfo system call prints\nfree-memory : %d bytes \nn_proc : %d\n",num_of_free_bytes,num_of_running_proc);
+  return 0;
+}
\ No newline at end of file
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..25ade16
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+
+void
+sinfo() {
+  if (sysinfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.");
+    sinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.");
+  sinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..356c7ce 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(void);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
